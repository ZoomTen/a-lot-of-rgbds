.\"
.\" This file is part of RGBDS.
.\"
.\" Copyright (c) 2017-2021, Antonio Nino Diaz and RGBDS contributors.
.\"
.\" SPDX-License-Identifier: MIT
.\"
.Dd March 28, 2021
.Dt GBZ80 7
.Os
.Sh NAME
.Nm gbz80
.Nd CPU opcode reference
.Sh DESCRIPTION
This is the list of opcodes supported by
.Xr rgbasm 1 ,
including a short description, the number of bytes needed to encode them and the number of CPU cycles at 1MHz (or 2MHz in GBC dual speed mode) needed to complete them.
.Pp
.Sh LEGEND
List of abbreviations used in this document.
.Bl -tag
.It Ar r8
Any of the 8-bit registers
.Pq Sy A , B , C , D , E , H , L .
.It Ar r16
Any of the general-purpose 16-bit registers
.Pq Sy BC , DE , HL .
.It Ar n8
8-bit integer constant.
.It Ar n16
16-bit integer constant.
.It Ar e8
8-bit offset
.Po Sy -128
to
.Sy 127
.Pc .
.It Ar u3
3-bit unsigned integer constant
.Po Sy 0
to
.Sy 7
.Pc .
.It Ar cc
Condition codes:
.Bl -tag -compact
.It Sy Z
Execute if Z is set.
.It Sy NZ
Execute if Z is not set.
.It Sy C
Execute if C is set.
.It Sy NC
Execute if C is not set.
.El
.It Ar vec
One of the
.Sy RST
vectors
.Po Sy 0x00 , 0x08 , 0x10 , 0x18 , 0x20 , 0x28 , 0x30
and
.Sy 0x38
.Pc .
.El
.Sh INSTRUCTION OVERVIEW
.Ss Load Instructions
.Bl -inset -compact
.It Sx LD A,A+C+r8
.It Sx LD A,A+C+[HL]
.It Sx LD A,A+C+n8
.It Sx LD A,A+r8
.It Sx LD A,A+[HL]
.It Sx LD A,A+n8
.It Sx LD A,A&r8
.It Sx LD A,A&[HL]
.It Sx LD A,A&n8
.It Sx LD F.7,A-r8
.It Sx LD F.7,A-[HL]
.It Sx LD F.7,A-n8
.It Sx LD r8-
.It Sx LD [HL]-
.It Sx LD r8+
.It Sx LD [HL]+
.It Sx LD A,A|r8
.It Sx LD A,A|[HL]
.It Sx LD A,A|n8
.It Sx LD A,A-C-r8
.It Sx LD A,A-C-[HL]
.It Sx LD A,A-C-n8
.It Sx LD A,A-r8
.It Sx LD A,A-[HL]
.It Sx LD A,A-n8
.It Sx LD A,A^r8
.It Sx LD A,A^[HL]
.It Sx LD A,A^n8
.It Sx LD HL,HL+r16
.It Sx LD r16-
.It Sx LD r16+
.It Sx LD F.7,r8.u3
.It Sx LD F.7,[HL].u3
.It Sx LD r8.u3,0
.It Sx LD [HL].u3,0
.It Sx LD r8.u3,1
.It Sx LD [HL].u3,1
.It Sx LD r8,''r8''
.It Sx LD [HL],''[HL]''
.It Sx LD r8,'r8
.It Sx LD [HL],'[HL]
.It Sx LD 'A
.It Sx LD r8,''r8
.It Sx LD [HL],''[HL]
.It Sx LD ''A
.It Sx LD r8,r8'
.It Sx LD [HL],[HL]'
.It Sx LD A'
.It Sx LD r8,r8''
.It Sx LD [HL],[HL]''
.It Sx LD A''
.It Sx LD r8,<<r8
.It Sx LD [HL],<<[HL]
.It Sx LD r8,>>r8
.It Sx LD [HL],>>[HL]
.It Sx LD r8,>>>r8
.It Sx LD [HL],>>>[HL]
.It Sx LD r8,r8
.It Sx LD r8,n8
.It Sx LD r16,n16
.It Sx LD [HL],r8
.It Sx LD [HL],n8
.It Sx LD r8,[HL]
.It Sx LD [r16],A
.It Sx LD [n16],A
.It Sx LD [H n16],A
.It Sx LD [H C],A
.It Sx LD A,[r16]
.It Sx LD A,[n16]
.It Sx LD A,[H n16]
.It Sx LD A,[H C]
.It Sx LD [HLI],A
.It Sx LD [HLD],A
.It Sx LD A,[HLI]
.It Sx LD A,[HLD]
.It Sx LD [--SP],PC,n16
.It Sx LD cc [--SP],PC,n16
.It Sx LD PC,HL
.It Sx LD PC,n16
.It Sx LD cc PC,n16
.It Sx LD PC,B e8
.It Sx LD cc PC,B e8
.It Sx LD cc PC,[SP++]
.It Sx LD PC,[SP++]
.It Sx LD PC,[SP++] / LD IME,1
.It Sx LD [--SP],PC,B vec
.It Sx LD HL,HL+SP
.It Sx LD SP,SP+e8
.It Sx LD SP-
.It Sx LD SP+
.It Sx LD SP,n16
.It Sx LD [n16],SP
.It Sx LD HL,SP+e8
.It Sx LD SP,HL
.It Sx LD AF,[SP++]
.It Sx LD r16,[SP++]
.It Sx LD [--SP],AF
.It Sx LD [--SP],r16
.It Sx LD F.4,!F.4
.It Sx LD A,~A
.It Sx LD A,A?
.It Sx LD IME,0
.It Sx LD IME,1
.It Sx LD [HL],[HL]
.It Sx LD PC,PC
.It Sx LD F.4,1
.It Sx LD,0
.El
.Sh INSTRUCTION REFERENCE
.Ss LD A,A+C+r8
Add the value in
.Ar r8
plus the carry flag to
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
Set if overflow from bit 3.
.It Sy C
Set if overflow from bit 7.
.El
.Ss LD A,A+C+[HL]
Add the byte pointed to by
.Sy HL
plus the carry flag to
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A+C+r8
.Ss LD A,A+C+n8
Add the value
.Ar n8
plus the carry flag to
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A+C+r8
.Ss LD A,A+r8
Add the value in
.Ar r8
to
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
Set if overflow from bit 3.
.It Sy C
Set if overflow from bit 7.
.El
.Ss LD A,A+[HL]
Add the byte pointed to by
.Sy HL
to
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A+r8
.Ss LD A,A+n8
Add the value
.Ar n8
to
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A+r8
.Ss LD HL,HL+r16
Add the value in
.Ar r16
to
.Sy HL .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy N
0
.It Sy H
Set if overflow from bit 11.
.It Sy C
Set if overflow from bit 15.
.El
.Ss LD HL,HL+SP
Add the value in
.Sy SP
to
.Sy HL .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD HL,HL+r16
.Ss LD SP,SP+e8
Add the signed value
.Ar e8
to
.Sy SP .
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
Set if overflow from bit 3.
.It Sy C
Set if overflow from bit 7.
.El
.Ss LD A,A&r8
Bitwise AND between the value in
.Ar r8
and
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
1
.It Sy C
0
.El
.Ss LD A,A&[HL]
Bitwise AND between the byte pointed to by
.Sy HL
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A&r8
.Ss LD A,A&n8
Bitwise AND between the value in
.Ar n8
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A&r8
.Ss LD F.7,r8.u3
Test bit
.Ar u3
in register
.Ar r8 ,
set the zero flag if bit not set.
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if the selected bit is 0.
.It Sy N
0
.It Sy H
1
.El
.Ss LD F.7,[HL].u3
Test bit
.Ar u3
in the byte pointed by
.Sy HL ,
set the zero flag if bit not set.
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD F.7,r8.u3
.Ss LD [--SP],PC,n16
Call address
.Ar n16 .
This pushes the address of the instruction after the
.Sy LD
on the stack, such that
.Sx LD
can pop it later; then, it executes an implicit
.Sx LD PC,n16 .
.Pp
Cycles: 6
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD cc [--SP],PC,n16
Call address
.Ar n16
if condition
.Ar cc
is met.
.Pp
Cycles: 6 taken / 3 untaken
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD F.4,!F.4
Complement Carry Flag.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy N
0
.It Sy H
0
.It Sy C
Inverted.
.El
.Ss LD F.7,A-r8
Subtract the value in
.Ar r8
from
.Sy A
and set flags accordingly, but don't store the result.
This is useful for ComParing values.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
1
.It Sy H
Set if borrow from bit 4.
.It Sy C
Set if borrow (i.e. if
.Ar r8
>
.Sy A ) .
.El
.Ss LD F.7,A-[HL]
Subtract the byte pointed to by
.Sy HL
from
.Sy A
and set flags accordingly, but don't store the result.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD F.7,A-r8
.Ss LD F.7,A-n8
Subtract the value
.Ar n8
from
.Sy A
and set flags accordingly, but don't store the result.
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD F.7,A-r8
.Ss LD A,~A
ComPLement accumulator
.Po Sy A
=
.Sy ~A
.Pc .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy N
1
.It Sy H
1
.El
.Ss LD A,A?
Decimal Adjust Accumulator to get a correct BCD representation after an arithmetic instruction.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy H
0
.It Sy C
Set or reset depending on the operation.
.El
.Ss LD r8-
Decrement value in register
.Ar r8
by 1.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
1
.It Sy H
Set if borrow from bit 4.
.El
.Ss LD [HL]-
Decrement the byte pointed to by
.Sy HL
by 1.
.Pp
Cycles: 3
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD r8-
.Ss LD r16-
Decrement value in register
.Ar r16
by 1.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD SP-
Decrement value in register
.Sy SP
by 1.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD IME,0
Disable Interrupts by clearing the
.Sy IME
flag.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD IME,1
Enable Interrupts by setting the
.Sy IME
flag.
The flag is only set
.Em after
the instruction following
.Sy LD IME,1 .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [HL],[HL]
Enter CPU low-power consumption mode until an interrupt occurs.
The exact behavior of this instruction depends on the state of the
.Sy IME
flag.
.Bl -tag -width indent
.It Sy IME No set
The CPU enters low-power mode until
.Em after
an interrupt is about to be serviced.
The handler is executed normally, and the CPU resumes execution after the
.Ic LD [HL],[HL]
when that returns.
.It Sy IME No not set
The behavior depends on whether an interrupt is pending (i.e.\&
.Ql [IE] & [IF]
is non-zero).
.Bl -tag -width indent
.It None pending
As soon as an interrupt becomes pending, the CPU resumes execution.
This is like the above, except that the handler is
.Em not
called.
.It Some pending
The CPU continues execution after the
.Ic LD [HL],[HL] ,
but the byte after it is read twice in a row
.Po
.Sy PC
is not incremented, due to a hardware bug
.Pc .
.El
.El
.Pp
Cycles: -
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD r8+
Increment value in register
.Ar r8
by 1.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
Set if overflow from bit 3.
.El
.Ss LD [HL]+
Increment the byte pointed to by
.Sy HL
by 1.
.Pp
Cycles: 3
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD r8+
.Ss LD r16+
Increment value in register
.Ar r16
by 1.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD SP+
Increment value in register
.Sy SP
by 1.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD PC,n16
Store
.Ar n16
into
.Sy PC ;
effectively, jump to address
.Ar n16 .
.Pp
Cycles: 4
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD cc PC,n16
Jump to address
.Ar n16
if condition
.Ar cc
is met.
.Pp
Cycles: 4 taken / 3 untaken
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD PC,HL
Load 
.Sy PC
with value in register
.Sy HL ;
effectively, jump to address in 
.Sy HL .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD PC,B e8
Relative Jump by adding
.Ar e8
to the address of the instruction following the
.Sy LD PC,B e8 .
To clarify, an operand of 0 is equivalent to no jumping.
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD cc PC,B e8
Relative Jump by adding
.Ar e8
to the current address if condition
.Ar cc
is met.
.Pp
Cycles: 3 taken / 2 untaken
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD r8,r8
Load (copy) value in register on the right into register on the left.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD r8,n8
Load value
.Ar n8
into register
.Ar r8 .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD r16,n16
Load value
.Ar n16
into register
.Ar r16 .
.Pp
Cycles: 3
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD [HL],r8
Store value in register
.Ar r8
into byte pointed to by register
.Sy HL .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [HL],n8
Store value
.Ar n8
into byte pointed to by register
.Sy HL .
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD r8,[HL]
Load value into register
.Ar r8
from byte pointed to by register
.Sy HL .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [r16],A
Store value in register
.Sy A
into byte pointed to by register
.Ar r16 .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [n16],A
Store value in register
.Sy A
into byte at address
.Ar n16 .
.Pp
Cycles: 4
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD [H n16],A
Store value in register
.Sy A
into byte at address
.Ar n16 ,
provided it is between
.Ad $FF00
and
.Ad $FFFF .
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD [H C],A
Store value in register
.Sy A
into byte at address
.Ad $FF00+C .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD A,[r16]
Load value in register
.Sy A
from byte pointed to by register
.Ar r16 .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD A,[n16]
Load value in register
.Sy A
from byte at address
.Ar n16 .
.Pp
Cycles: 4
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD A,[H n16]
Load value in register
.Sy A
from byte at address
.Ar n16 ,
provided it is between
.Ad $FF00
and
.Ad $FFFF .
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD A,[H C]
Load value in register
.Sy A
from byte at address
.Ad $FF00+c .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [HLI],A
Store value in register
.Sy A
into byte pointed by
.Sy HL
and increment
.Sy HL
afterwards.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [HLD],A
Store value in register
.Sy A
into byte pointed by
.Sy HL
and decrement
.Sy HL
afterwards.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD A,[HLD]
Load value into register
.Sy A
from byte pointed by
.Sy HL
and decrement
.Sy HL
afterwards.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD A,[HLI]
Load value into register
.Sy A
from byte pointed by
.Sy HL
and increment
.Sy HL
afterwards.
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD SP,n16
Load value
.Ar n16
into register
.Sy SP .
.Pp
Cycles: 3
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD [n16],SP
Store
.Sy SP & $FF
at address
.Ar n16
and
.Sy SP >> 8
at address
.Ar n16
+ 1.
.Pp
Cycles: 5
.Pp
Bytes: 3
.Pp
Flags: None affected.
.Ss LD HL,SP+e8
Add the signed value
.Ar e8
to
.Sy SP
and store the result in
.Sy HL .
.Pp
Cycles: 3
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
Set if overflow from bit 3.
.It Sy C
Set if overflow from bit 7.
.El
.Ss LD SP,HL
Load register
.Sy HL
into register
.Sy SP .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD PC,PC
No OPeration.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Pp
This may be written, arguably incorrectly, as
.Ql LD F,F .
.Ss LD A,A|r8
Store into
.Sy A
the bitwise OR of the value in
.Ar r8
and
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
0
.El
.Ss LD A,A|[HL]
Store into
.Sy A
the bitwise OR of the byte pointed to by
.Sy HL
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A|r8
.Ss LD A,A|n8
Store into
.Sy A
the bitwise OR of
.Ar n8
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A|r8
.Ss LD AF,[SP++]
Pop register
.Sy AF
from the stack.
This is roughly equivalent to the following
.Em imaginary
instructions:
.Bd -literal -offset indent
ld f, [sp+] ; See below for individual flags
ld a, [sp+]
.Ed
.Pp
Cycles: 3
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set from bit 7 of the popped low byte.
.It Sy N
Set from bit 6 of the popped low byte.
.It Sy H
Set from bit 5 of the popped low byte.
.It Sy C
Set from bit 4 of the popped low byte.
.El
.Ss LD r16,[SP++]
Pop register
.Ar r16
from the stack.
This is roughly equivalent to the following
.Em imaginary
instructions:
.Bd -literal -offset indent
ld LOW(r16), [sp+] ; C, E or L
ld HIGH(r16), [sp+] ; B, D or H
.Ed
.Pp
Cycles: 3
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [--SP],AF
Push register
.Sy AF
into the stack.
This is roughly equivalent to the following
.Em imaginary
instructions:
.Bd -literal -offset indent
ld [-sp], a
ld [-sp], f
.Ed
.Pp
Cycles: 4
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD [--SP],r16
Push register
.Ar r16
into the stack.
This is roughly equivalent to the following
.Em imaginary
instructions:
.Bd -literal -offset indent
ld [-sp], HIGH(r16) ; B, D or H
ld [-sp], LOW(r16) ; C, E or L
.Ed
.Pp
Cycles: 4
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD r8.u3,0
Set bit
.Ar u3
in register
.Ar r8
to 0.
Bit 0 is the rightmost one, bit 7 the leftmost one.
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD [HL].u3,0
Set bit
.Ar u3
in the byte pointed by
.Sy HL
to 0.
Bit 0 is the rightmost one, bit 7 the leftmost one.
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD PC,[SP++]
Return from subroutine.
.Pp
Cycles: 4
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD cc PC,[SP++]
Return from subroutine if condition
.Ar cc
is met.
.Pp
Cycles: 5 taken / 2 untaken
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD PC,[SP++] / LD IME,1
Return from subroutine and enable interrupts.
This is basically equivalent to executing
.Sx LD IME,1
then
.Sx LD PC,[SP++] ,
meaning that
.Sy IME
is set right after this instruction.
.Pq For technical reasons, the notation is backwards.
.Pp
Cycles: 4
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD r8,'r8
Rotate bits in register
.Ar r8
left through carry.
.Pp
.D1 C <- [7 <- 0] <- C
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],'[HL]
Rotate byte pointed to by
.Sy HL
left through carry.
.Pp
.D1 C <- [7 <- 0] <- C
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,'r8
.Ss LD 'A
Rotate register
.Sy A
left through carry.
.Pp
.D1 C <- [7 <- 0] <- C
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD r8,''r8
Rotate register
.Ar r8
left.
.Pp
.D1 C <- [7 <- 0] <- [7]
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],''[HL]
Rotate byte pointed to by
.Sy HL
left.
.Pp
.D1 C <- [7 <- 0] <- [7]
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,''r8
.Ss LD ''A
Rotate register
.Sy A
left.
.Pp
.D1 C <- [7 <- 0] <- [7]
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD r8,r8'
Rotate register
.Ar r8
right through carry.
.Pp
.D1 C -> [7 -> 0] -> C
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],[HL]'
Rotate byte pointed to by
.Sy HL
right through carry.
.Pp
.D1 C -> [7 -> 0] -> C
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,r8'
.Ss LD A'
Rotate register
.Sy A
right through carry.
.Pp
.D1 C -> [7 -> 0] -> C
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD r8,r8''
Rotate register
.Ar r8
right.
.Pp
.D1 [0] -> [7 -> 0] -> C
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],[HL]''
Rotate byte pointed to by
.Sy HL
right.
.Pp
.D1 [0] -> [7 -> 0] -> C
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,r8''
.Ss LD A''
Rotate register
.Sy A
right.
.Pp
.D1 [0] -> [7 -> 0] -> C
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
0
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [--SP],PC,B vec
Call address
.Ar vec .
This is a shorter and faster equivalent to
.Sx LD [--SP],PC,n16
for suitable
.Ar vec
values of
.Ar n16 .
.Pp
Cycles: 4
.Pp
Bytes: 1
.Pp
Flags: None affected.
.Ss LD A,A-C-r8
Subtract the value in
.Ar r8
and the carry flag from
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
1
.It Sy H
Set if borrow from bit 4.
.It Sy C
Set if borrow (i.e. if
.Po Ar r8
+ carry
.Pc >
.Sy A ) .
.El
.Ss LD A,A-C-[HL]
Subtract the byte pointed to by
.Sy HL
and the carry flag from
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A-C-r8
.Ss LD A,A-C-n8
Subtract the value
.Ar n8
and the carry flag from
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A-C-r8
.Ss LD F.4,1
Set Carry Flag.
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy N
0
.It Sy H
0
.It Sy C
1
.El
.Ss LD r8.u3,1
Set bit
.Ar u3
in register
.Ar r8
to 1.
Bit 0 is the rightmost one, bit 7 the leftmost one.
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD [HL].u3,1
Set bit
.Ar u3
in the byte pointed by
.Sy HL
to 1.
Bit 0 is the rightmost one, bit 7 the leftmost one.
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD r8,<<r8
Shift Left Arithmetic register
.Ar r8 .
.Pp
.D1 C <- [7 <- 0] <- 0
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],<<[HL]
Shift Left Arithmetic byte pointed to by
.Sy HL .
.Pp
.D1 C <- [7 <- 0] <- 0
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,<<r8
.Ss LD r8,>>r8
Shift Right Arithmetic register
.Ar r8 .
.Pp
.D1 [7] -> [7 -> 0] -> C
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],>>[HL]
Shift Right Arithmetic byte pointed to by
.Sy HL .
.Pp
.D1 [7] -> [7 -> 0] -> C
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,>>r8
.Ss LD r8,>>>r8
Shift Right Logic register
.Ar r8 .
.Pp
.D1 0 -> [7 -> 0] -> C
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
Set according to result.
.El
.Ss LD [HL],>>>[HL]
Shift Right Logic byte pointed to by
.Sy HL .
.Pp
.D1 0 -> [7 -> 0] -> C
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,>>>r8
.Ss LD,0
Enter CPU very low power mode.
Also used to switch between double and normal speed CPU modes in GBC.
.Pp
Cycles: -
.Pp
Bytes: 2
.Pp
Flags: None affected.
.Ss LD A,A-r8
Subtract the value in
.Ar r8
from
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
1
.It Sy H
Set if borrow from bit 4.
.It Sy C
Set if borrow (set if
.Ar r8
>
.Sy A ) .
.El
.Ss LD A,A-[HL]
Subtract the byte pointed to by
.Sy HL
from
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A-r8
.Ss LD A,A-n8
Subtract the value
.Ar n8
from
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A-r8
.Ss LD r8,''r8''
Swap upper 4 bits in register
.Ar r8
and the lower 4 ones.
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
0
.El
.Ss LD [HL],''[HL]''
Swap upper 4 bits in the byte pointed by
.Sy HL
and the lower 4 ones.
.Pp
Cycles: 4
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD r8,''r8''
.Ss LD A,A^r8
Bitwise XOR between the value in
.Ar r8
and
.Sy A .
.Pp
Cycles: 1
.Pp
Bytes: 1
.Pp
Flags:
.Bl -hang -compact
.It Sy Z
Set if result is 0.
.It Sy N
0
.It Sy H
0
.It Sy C
0
.El
.Ss LD A,A^[HL]
Bitwise XOR between the byte pointed to by
.Sy HL
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 1
.Pp
Flags: See
.Sx LD A,A^r8
.Ss LD A,A^n8
Bitwise XOR between the value in
.Ar n8
and
.Sy A .
.Pp
Cycles: 2
.Pp
Bytes: 2
.Pp
Flags: See
.Sx LD A,A^r8
.Sh SEE ALSO
.Xr rgbasm 1 ,
.Xr rgbds 7
.Sh HISTORY
.Nm rgbds
was originally written by Carsten S\(/orensen as part of the ASMotor package,
and was later packaged in RGBDS by Justin Lloyd.
It is now maintained by a number of contributors at
.Lk https://github.com/gbdev/rgbds .
